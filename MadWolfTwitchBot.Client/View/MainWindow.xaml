<Window x:Class="MadWolfTwitchBot.Client.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MadWolfTwitchBot.Client.ViewModel"
        xmlns:model="clr-namespace:MadWolfTwitchBot.Client.Model"
        xmlns:input="clr-namespace:Microsoft.Toolkit.Mvvm.Wpf.Input"
        mc:Ignorable="d"
        Title="{Binding Title}" Height="500" Width="800">
    <Window.DataContext>
        <local:MainWindowViewModel />
    </Window.DataContext>

    <Window.Resources>
        <local:TokenStatusToUriConverter x:Key="TokenStatusConverter" />
        <local:ConnectionStatusToStringConverter x:Key="ConnectionStatusConverter" />
        <local:ApplicationStatusToVisiblityCoverter x:Key="AppStatusConverter" />
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="150" />
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="75" />
            
            <RowDefinition Height="*" />
            <RowDefinition Height="30" />
            
            <RowDefinition Height="*" />

            <RowDefinition Height="20" />
        </Grid.RowDefinitions>

        <GroupBox Header="Bot Details" IsEnabled="{Binding IsDisconnected}">
            <Grid HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />

                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition Height="25" />
                    <RowDefinition Height="25" />
                </Grid.RowDefinitions>

                <TextBlock Text="Username" VerticalAlignment="Center" />
                <StackPanel Grid.Column="1" Orientation="Horizontal">
                    <ComboBox Width="160" ItemsSource="{Binding AvailableBots}" SelectedItem="{Binding SelectedBot}" >
                        <ComboBox.ItemTemplate>
                            <DataTemplate DataType="{x:Type model:BasicBot}">
                                <TextBlock Text="{Binding DisplayName}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>

                    <Button Width="50" Content="Add" Command="{Binding AddBotCommand}" />
                    <Button Width="50" Content="Edit" Command="{Binding EditBotCommand}"
                            input:RelayCommandExtensions.IsCommandUpdateEnabled="True" />
                    <Button Width="50" Content="Remove" Command="{Binding DeleteBotCommand}"
                            input:RelayCommandExtensions.IsCommandUpdateEnabled="True" />
                </StackPanel>
                
                <TextBlock Grid.Row="1" VerticalAlignment="Center" Text="Channel" />
                <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal">
                    <ComboBox Width="160" IsEditable="True" ItemsSource="{Binding TwitchChannels}" SelectedItem="{Binding SelectedChannel}" Text="{Binding ChannelSearch, UpdateSourceTrigger=LostFocus}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate DataType="{x:Type model:BasicChannel}">
                                <TextBlock Text="{Binding DisplayName}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>

                    <Button Width="50" Content="Validate" Command="{Binding ValidateChannelCommand}"
                            input:RelayCommandExtensions.IsCommandUpdateEnabled="True" />
                    <Button Width="50" Content="Edit" Command="{Binding EditChannelCommand}"
                            input:RelayCommandExtensions.IsCommandUpdateEnabled="True" />
                    <Button Width="50" Content="Remove" Command="{Binding DeleteChannelCommand}"
                            input:RelayCommandExtensions.IsCommandUpdateEnabled="True" />
                </StackPanel>

                <StackPanel Grid.Column="2" Orientation="Horizontal" HorizontalAlignment="Right">
                    <TextBlock Grid.Column="2" Text="Token Status" VerticalAlignment="Center" HorizontalAlignment="Right" />
                    <Image Grid.Column="3" MaxHeight="16px" Source="{Binding TokenStatus, Converter={StaticResource TokenStatusConverter}}" />
                </StackPanel>

                <StackPanel Grid.Row="1" Grid.Column="2" Orientation="Horizontal">
                    <Button Content="Refresh Token" Command="{Binding RefreshTokenCommand}"
                            input:RelayCommandExtensions.IsCommandUpdateEnabled="True" />
                    <Button Content="Generate Token" Command="{Binding GetTokenCommand}"
                            input:RelayCommandExtensions.IsCommandUpdateEnabled="True" />
                </StackPanel>
                
            </Grid>
        </GroupBox>
        <StackPanel Grid.Column="1" VerticalAlignment="Center">
            <Button Margin="0 1" Content="Connect" Command="{Binding ConnectCommand}"
                    input:RelayCommandExtensions.IsCommandUpdateEnabled="True" />

            <Button Margin="0 1" Content="Disconnect" Command="{Binding DisconnectCommand}"
                    input:RelayCommandExtensions.IsCommandUpdateEnabled="True" />
        </StackPanel>

        <GroupBox Grid.Row="1" Header="Bot Commands">
            <TabControl>
                <TabItem Header="Global">
                    <DataGrid AutoGenerateColumns="False" 
                      IsReadOnly="True"
                      CanUserSortColumns="False"
                      ItemsSource="{Binding GlobalCommands}">
                        <DataGrid.Columns>
                            <DataGridTemplateColumn>
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button Content="..." 
                                                Command="{Binding DataContext.EditCommandCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" 
                                                CommandParameter="{Binding}"
                                                input:RelayCommandExtensions.IsCommandUpdateEnabled="True" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>

                            <DataGridTextColumn Width="75" Header="Command" Binding="{Binding Name}" />

                            <DataGridTextColumn Width="*" Header="Output Message" Binding="{Binding ResponseMessage}">
                                <DataGridTextColumn.ElementStyle>
                                    <Style>
                                        <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </TabItem>
                
                <TabItem Header="Local">
                    <DataGrid AutoGenerateColumns="False" 
                      IsReadOnly="True"
                      CanUserSortColumns="False"
                      ItemsSource="{Binding LocalCommands}">
                        <DataGrid.Columns>
                            <DataGridTemplateColumn>
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button Content="..."
                                                Command="{Binding DataContext.EditCommandCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" 
                                                CommandParameter="{Binding}"
                                                input:RelayCommandExtensions.IsCommandUpdateEnabled="True" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>

                            <DataGridTextColumn Width="75" Header="Command" Binding="{Binding Name}" />

                            <DataGridTextColumn Width="*" Header="Output Message" Binding="{Binding ResponseMessage}">
                                <DataGridTextColumn.ElementStyle>
                                    <Style>
                                        <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </TabItem>
            </TabControl>
        </GroupBox>
        <StackPanel Grid.Row="2" Grid.ColumnSpan="2" Orientation="Horizontal" VerticalAlignment="Center">
            <Button Margin="1 0" Width="125" Content="Create Command" Command="{Binding AddCommandCommand}" />
            <Button Margin="1 0" Width="125" Content="Delete Command(s)" Command="{Binding DeleteCommandCommand}" />
        </StackPanel>

        <GroupBox Grid.Row="3" Grid.ColumnSpan="2" Header="Chat Log">
            <ListView FontFamily="Consolas" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ItemsSource="{Binding Messages}">
                <ListView.ItemTemplate>
                    <DataTemplate DataType="{x:Type model:ChatMessage}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            
                            <TextBlock TextAlignment="Right"
                                       Text="{Binding DisplayName}"
                                       Foreground="{Binding HexColour}"
                                       FontWeight="Bold"
                                       Margin="3 0"/>
                            <TextBlock Grid.Column="1"
                                       Text="{Binding Message}"
                                       TextWrapping="Wrap" />
                        </Grid>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
        </GroupBox>

        <StatusBar Grid.Row="4" Grid.ColumnSpan="2" FontSize="10">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto"/>
                            
                            <ColumnDefinition Width="*" />

                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="75"/>
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>

            <StatusBarItem>
                <TextBlock Text="{Binding AppState.Message}"
                           Foreground="{Binding AppState.ColourHex}" />
            </StatusBarItem>

            <Separator Grid.Column="1" Visibility="{Binding AppState.Message, Converter={StaticResource AppStatusConverter}}" />

            <Separator Grid.Column="3" />

            <StatusBarItem Grid.Column="4">
                <TextBlock Text="{Binding IsDisconnected, Converter={StaticResource ConnectionStatusConverter}}"
                           Foreground="Gray"
                           TextAlignment="Right"
                           HorizontalAlignment="Stretch"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
